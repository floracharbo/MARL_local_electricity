# local network
#ntw = {'C'          : 0.0517090557715045,
#ntw = {'C'          : 0.029542462146148776,     # GBP/kWh distribution costs
export_C: 0.01 # GBP/kWh distribution costs for exports
charge_type: 0  # 0 linear, 1 quadratic on quantity imported/exported
V: 415 # V nominal voltage from Mortsyn 2019 multiclass
R: 0.084 # Ohm average resistance between the prosumers and main grid from Mortsyn 2019 multiclass
manage_agg_power: False # Add constraints and penalty on max aggregated imports and exports
max_grid_import: 6 # Limit to grid import
max_grid_export: 6 # Limit to grid export
penalty_import: 0.01 # Coefficient multiplied with import values to determine penalty
penalty_export: 0.01 # Coefficient multiplied with export values to determine penalty
small_coefficient: 1.e-5 # Small coefficient used in the import and export constraints
manage_voltage: False # Add constraints and penalty to limit voltage violations with relaxed optimisation
penalise_individual_exports: True # Penalises the export to the external grid
compare_pandapower_optimisation: False # Compares the power flows and losses results from relaxed opti and pandapower
max_voltage: 1.1 # Upper limit for voltage on buses in per unit
min_voltage: 0.96 # Lower limit for voltage on buses in per unit
penalty_overvoltage: 1.e-5 # Coefficient multiplied with overvoltage values to determine penalty
penalty_undervoltage: 1.e-5 # Coefficient multiplied with undervoltage values to determine penalty
weight_network_costs: 1 # Reward weight of network costs voltage_costs and import_export_costs
base_power: 1000000 # base power for per unit system in W, as defined in pandapower
base_voltage: 416 # base voltage for per unit system in V
subset_line_losses_modelled: 30 # Number of lines accounted for in losses
tol_rel_voltage_diff: 1.e-3  # relative difference tolerance for voltage values between the convex optimisation and pandapower simulations
tol_rel_voltage_costs: 1.e-2  # relative difference tolerance for voltage costs between the convex optimisation and pandapower simulations
tol_abs_line_losses: 1.e-2  # absolute difference tolerance for line losses between the convex optimisation and pandapower simulations
reactive_power_for_voltage_control: False  # if True, the power factor is not fixed for the EV batteries but instead an optimisation decision variable/determined by an RL agent action
pf_passive_homes : 0.95 # Power factor used for passive houses, from IEEE Low Voltage Test Feeder
pf_flexible_homes : 0.95 # Power factor used for flexible houses, from IEEE Low Voltage Test Feeder
line_losses_method : 'subset_of_lines' # choice between subset_of_lines and iteration
tol_voltage_iteration: 0.001 # tolerance on voltages when iteratively solving the optimization
