saveresdata: 1
plot_type: 1  # if 0 only plot learning curves, if 1 if also smoothing, 2 if all plots
high_res: False  # printing figures in high resolution
make_video: False  # make video of state space exploration
plot_profiles: False  # plot example days for input data + resulting decisions by agents for each methodology
max_n_profiles_plot: 3
save_run: True
learner_log_interval: 2000 # Log training stats every {} timesteps
plot_indiv_repeats_rewards: False
last_entries: [
  'netp', 'netp0', 'store_outs', 'store',
  'totcons', 'tot_E_heat', 'T', 'T_air',
  'voltage_squared', 'hourly_line_losses',
  'action','reward', 'flex_cons',
  'ldflex', 'ldfixed','tot_cons_loads',
  'grdC','wholesale',
  'cintensity',
  'break_down_rewards',  # values i want to store from last epoch so that i can plot
  'loaded_buses', 'sgen_buses',
  'q_ext_grid', 'q_car', 'q_house'
]
repeat_entries: [
  'train_rewards', 'eval_rewards', 'eval_actions', 'mean_eval_rewards',
   'stability', 'last', 'seed', 'eps', 'ind_seed_deterministic',
   'duration_epoch', 'n_not_feas', 'train_actions',
   'train_states', 'q_tables', 'counter'
]
run_entries0: [
  'timer_optimisation_mean', 'timer_optimisation_std', 'timer_optimisation_count',
  'timer_pp_mean', 'timer_pp_std', 'timer_pp_count',
  'timer_comparison_mean', 'timer_comparison_std', 'timer_comparison_count',
  'timer_feasible_data_mean', 'timer_feasible_data_std', 'timer_feasible_data_count',
  'duration_learning'
]
pandapower_voltage_entries: [
  'max_rel_diff_voltage', 'mean_rel_diff_voltage',
  'std_rel_diff_voltage', 'n_voltage_error'
]
discrete_states_info_entries : [
    'possible_states', 'granularity_state0', 'granularity_state1', 'multipliers_state'
]

save_nns: True
plotting_batch: False
plotting_action: False  # used for plotting mu position on graph
plot_imp_exp_check: False
